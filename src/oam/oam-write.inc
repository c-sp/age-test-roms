; Test OAM write access
;
IF !DEF(INC_OAM_WRITE)
DEF INC_OAM_WRITE EQU 1

IF DEF(DMG_C)
    DEF C81 EQU $81
    DEF C00 EQU $00
ELSE
    DEF C81 EQU $00
    DEF C00 EQU $81
ENDC

INCLUDE "oam/write.inc"



EXPECTED_TEST_RESULTS_DMG:
    DB 8
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00

EXPECTED_TEST_RESULTS_CGB:
    DB 16
    ; single speed
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    DB $FF, $FF, $FF, $FF, $FF, $00, $00, $00
    ; double speed
    DB $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00
    DB $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00
    DB $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00
    DB $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00
    DB $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00
    DB $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00
    DB $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00
    DB $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00

EXPECTED_TIMING_RESULTS:
    ;
    ; (*) DMG-C: This line seems to depend on when the LCD was last switched off.
    ;            When the test is expanded to cover more than 2 frames,
    ;            the complete line looks different.
    ;            Note that this does NOT happen on my CGB-B/E.
    ;            TODO: we should look into this.
    ;
    ; single speed
    ;
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 0
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00
    DB C81, C00, C81, C00, $00, C00,  $00, C00, C81, $81, C81, $81 ; (*)
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 1
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00
    DB C81, C00, C81, C00, $00, $81,  $00, $81, C81, $81, C81, $81 ; (*)
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 2
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00
    DB C81, $00, C81, C00, $00, $81,  $00, $81, C81, $81, C81, $81 ; (*)
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 3
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00
    DB C81, $00, C81, C00, $00, $81,  $00, $81, C81, $81, C81, $81 ; (*)
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 4
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00
    DB C81, $00, C81, $00, $00, C81,  $00, C81, C81, $00, C81, $00 ; (*)
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 5
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00
    DB C81, $00, C81, $00, $00, C81,  $00, C81, C81, $00, C81, $00 ; (*)
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 6
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00
    DB C81, $00, C81, $00, $00, C81,  $00, C81, C81, $00, C81, $00 ; (*)
    DB $00, $00, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 7
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00
    DB C81, $00, C81, $00, $00, C81,  $00, C81, C81, $00, C81, $00 ; (*)
    DB $00, $00, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ;
    ; double speed
    ;
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 0
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 1
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 2
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 3
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 4
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 5
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 6
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81
    ; line 0, 1, 143 (frame 0)        line 0, 1, 143 (frame 1)
    DB $81, $00, $81, $00, $81, $00,  $81, $00, $81, $00, $81, $00 ; SCX 7
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $00, $00, $00, $00, $00,  $00, $00, $00, $00, $00, $00
    DB $00, $81, $00, $81, $00, $81,  $00, $81, $00, $81, $00, $81



timed_writes:
    ; write on the edge of line 0 mode 3 (frame 0)
    DELAY 10
    ld [hl+], a ; 2 m-cycles
    ; write on the edge of line 0 mode 0 (frame 0)
    DELAY 172 / 4 - 2
    ld [hl+], a
    ; write on the edge of line 1 mode 2 (frame 0)
    DELAY 48
    ld [hl+], a
    ; write on the edge of line 1 mode 0 (frame 0)
    DELAY (4 + 80 + 172) / 4 - 2
    ld [hl+], a
    ; write on the edge of line 143 mode 2 (frame 0)
    DELAY 48 + (141 * 456) / 4
    ld [hl+], a
    ; write on the edge of line 143 mode 0 (frame 0)
    DELAY (4 + 80 + 172) / 4 - 2
    ld [hl+], a

    ; write on the edge of line 0 mode 2 (frame 1)
    DELAY 48 + (10 * 456) / 4
    ld [hl+], a
    ; write on the edge of line 0 mode 0 (frame 1)
    DELAY (4 + 80 + 172) / 4 - 2
    ld [hl+], a
    ; write on the edge of line 1 mode 2 (frame 1)
    DELAY 48
    ld [hl+], a
    ; write on the edge of line 1 mode 0 (frame 1)
    DELAY (4 + 80 + 172) / 4 - 2
    ld [hl+], a
    ; write on the edge of line 143 mode 2 (frame 1)
    DELAY 48 + (141 * 456) / 4
    ld [hl+], a
    ; write on the edge of line 143 mode 0 (frame 1)
    DELAY (4 + 80 + 172) / 4 - 2
    ld [hl+], a
    ret



timed_writes_ds:
    ; write on the edge of line 0 mode 3 (frame 0)
    DELAY 30
    ld [hl+], a ; 2 m-cycles
    ; write on the edge of line 0 mode 0 (frame 0)
    DELAY 172 / 2 - 2
    ld [hl+], a
    ; write on the edge of line 1 mode 2 (frame 0)
    DELAY 99
    ld [hl+], a
    ; write on the edge of line 1 mode 0 (frame 0)
    DELAY (80 + 172) / 2 - 2
    ld [hl+], a
    ; write on the edge of line 143 mode 2 (frame 0)
    DELAY 100 + (141 * 456) / 2
    ld [hl+], a
    ; write on the edge of line 143 mode 0 (frame 0)
    DELAY (80 + 172) / 2 - 2
    ld [hl+], a

    ; write on the edge of line 0 mode 2 (frame 1)
    DELAY 100 + (10 * 456) / 2
    ld [hl+], a
    ; write on the edge of line 0 mode 0 (frame 1)
    DELAY (80 + 172) / 2 - 2
    ld [hl+], a
    ; write on the edge of line 1 mode 2 (frame 1)
    DELAY 100
    ld [hl+], a
    ; write on the edge of line 1 mode 0 (frame 1)
    DELAY (80 + 172) / 2 - 2
    ld [hl+], a
    ; write on the edge of line 143 mode 2 (frame 1)
    DELAY 100 + (141 * 456) / 2
    ld [hl+], a
    ; write on the edge of line 143 mode 0 (frame 1)
    DELAY (80 + 172) / 2 - 2
    ld [hl+], a
    ret

run_test:
    RUN_TEST _OAMRAM



ENDC ; !DEF(INC_OAM_WRITE)
